name: Supabase Database Migrations

on:
  push:
    branches: [main]
    paths:
      - 'supabase/migrations/**'
      - 'supabase/seed.sql'

jobs:
  validate-migrations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Validate migration files
        run: |
          # Check if migration files are valid SQL
          for file in supabase/migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Validating $file"
              # Basic SQL syntax validation
              if ! supabase db lint --file="$file"; then
                echo "Invalid SQL syntax in $file"
                exit 1
              fi
            fi
          done

  migrate-staging:
    runs-on: ubuntu-latest
    needs: [validate-migrations]
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Run migrations on staging
        run: |
          supabase db push --db-url ${{ secrets.SUPABASE_STAGING_DB_URL }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Generate TypeScript types
        run: |
          supabase gen types typescript --db-url ${{ secrets.SUPABASE_STAGING_DB_URL }} > types/supabase.ts

      - name: Commit updated types
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add types/supabase.ts
          git diff --staged --quiet || git commit -m "Update Supabase types [skip ci]"
          git push

  migrate-production:
    runs-on: ubuntu-latest
    needs: [migrate-staging]
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Backup production database
        run: |
          echo "Creating backup of production database..."
          # Add your backup strategy here
          # For example: pg_dump or Supabase backup

      - name: Run migrations on production
        run: |
          supabase db push --db-url ${{ secrets.SUPABASE_PRODUCTION_DB_URL }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

      - name: Verify migration success
        run: |
          # Add verification steps here
          echo "Verifying migration success..."
          # You could run test queries or health checks

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Rollback on failure
        run: |
          echo "Migration failed, initiating rollback..."
          # Add rollback logic here
          # This could involve restoring from backup or running rollback migrations