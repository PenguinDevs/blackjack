name: Documentation & Storybook

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]

jobs:
  build-storybook:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Storybook
        run: npm run build-storybook

      - name: Upload Storybook build
        uses: actions/upload-artifact@v4
        with:
          name: storybook-build
          path: storybook-static/
          retention-days: 30

  deploy-storybook:
    runs-on: ubuntu-latest
    needs: [build-storybook]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Storybook
        run: npm run build-storybook

      - name: Deploy to GitHub Pages
        if: github.repository_owner == 'PenguinDevs'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-static
          destination_dir: storybook

      - name: Deploy to Vercel (Alternative)
        if: github.repository_owner != 'PenguinDevs'
        run: |
          npm install -g vercel
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --confirm
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_STORYBOOK_PROJECT_ID }}

  generate-api-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate API documentation
        run: |
          # Generate TypeDoc documentation
          if [ -f "tsconfig.json" ]; then
            npx typedoc --out docs/api src/
          fi
          
          # Generate OpenAPI docs if you have API routes
          if [ -d "pages/api" ] || [ -d "app/api" ]; then
            echo "Generating API documentation..."
            # You could use swagger-jsdoc or similar here
          fi

      - name: Upload API docs
        uses: actions/upload-artifact@v4
        with:
          name: api-documentation
          path: docs/
          retention-days: 30

  update-readme-badges:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README badges
        run: |
          # Update build status badge
          BUILD_STATUS="passing"
          if [ "${{ job.status }}" != "success" ]; then
            BUILD_STATUS="failing"
          fi
          
          # Update version badge from package.json
          VERSION=$(node -p "require('./package.json').version")
          
          # Update coverage badge (if you have coverage reports)
          # COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
          
          # Use sed to update badges in README.md
          sed -i "s/build-.*-/build-${BUILD_STATUS}-/g" README.md
          sed -i "s/version-.*-/version-${VERSION}-/g" README.md

      - name: Commit README updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add README.md
            git commit -m "docs: update README badges [skip ci]"
            git push
          fi

  component-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate component documentation
        run: |
          echo "Generating component documentation..."
          
          # Create a script to extract component props and generate docs
          cat > generate-component-docs.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          const componentsDir = 'components/ui';
          const outputDir = 'docs/components';
          
          if (!fs.existsSync(outputDir)) {
            fs.mkdirSync(outputDir, { recursive: true });
          }
          
          if (fs.existsSync(componentsDir)) {
            const files = fs.readdirSync(componentsDir).filter(file => file.endsWith('.tsx'));
            
            files.forEach(file => {
              const componentName = path.basename(file, '.tsx');
              const content = fs.readFileSync(path.join(componentsDir, file), 'utf8');
              
              // Extract props interface (basic extraction)
              const propsMatch = content.match(/interface\s+\w*Props[^{]*{([^}]*)}/);
              const props = propsMatch ? propsMatch[1] : 'No props documented';
              
              const doc = `# ${componentName}
          
          ## Props
          \`\`\`typescript
          ${props}
          \`\`\`
          
          ## Usage
          \`\`\`tsx
          import { ${componentName} } from '@/components/ui/${componentName.toLowerCase()}';
          \`\`\`
          `;
              
              fs.writeFileSync(path.join(outputDir, `${componentName}.md`), doc);
            });
            
            console.log('Component documentation generated');
          }
          EOF
          
          node generate-component-docs.js

      - name: Upload component docs
        uses: actions/upload-artifact@v4
        with:
          name: component-documentation
          path: docs/components/
          retention-days: 30

  storybook-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Build Storybook
        run: npm run build-storybook

      - name: Serve Storybook
        run: npx http-server storybook-static --port 6006 --silent &

      - name: Wait for Storybook
        run: npx wait-on http://localhost:6006

      - name: Run Storybook tests
        run: npm run test:storybook

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: storybook-test-results
          path: test-results/
          retention-days: 30

  accessibility-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Storybook
        run: npm run build-storybook

      - name: Run accessibility tests
        run: |
          # Install axe-core for accessibility testing
          npm install -g @axe-core/cli
          
          # Serve Storybook
          npx http-server storybook-static --port 6006 --silent &
          npx wait-on http://localhost:6006
          
          # Run axe accessibility tests
          axe http://localhost:6006 --exit