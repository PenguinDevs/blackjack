name: Performance & Monitoring

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 6 * * *' # Daily at 6 AM

jobs:
  lighthouse-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm run start &
        env:
          NODE_ENV: production

      - name: Wait for server
        run: npx wait-on http://localhost:3000

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30

  bundle-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Analyze bundle size
        run: |
          npm run build
          npx @next/bundle-analyzer build

      - name: Bundle size report
        uses: andresz1/size-limit-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

  core-web-vitals:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Measure Core Web Vitals
        run: |
          # Create a script to measure CWV
          cat > measure-cwv.js << 'EOF'
          const { chromium } = require('playwright');
          
          (async () => {
            const browser = await chromium.launch();
            const page = await browser.newPage();
            
            // Navigate to your production URL
            const url = process.env.PRODUCTION_URL || 'https://your-app.vercel.app';
            await page.goto(url);
            
            // Measure Core Web Vitals
            const cwv = await page.evaluate(() => {
              return new Promise((resolve) => {
                const observer = new PerformanceObserver((list) => {
                  const entries = list.getEntries();
                  const vitals = {};
                  
                  entries.forEach((entry) => {
                    if (entry.entryType === 'largest-contentful-paint') {
                      vitals.LCP = entry.startTime;
                    } else if (entry.entryType === 'first-input') {
                      vitals.FID = entry.processingStart - entry.startTime;
                    } else if (entry.entryType === 'layout-shift') {
                      if (!vitals.CLS) vitals.CLS = 0;
                      vitals.CLS += entry.value;
                    }
                  });
                  
                  if (vitals.LCP && vitals.FID && vitals.CLS !== undefined) {
                    resolve(vitals);
                  }
                });
                
                observer.observe({ entryTypes: ['largest-contentful-paint', 'first-input', 'layout-shift'] });
                
                // Fallback timeout
                setTimeout(() => resolve(vitals), 10000);
              });
            });
            
            console.log('Core Web Vitals:', cwv);
            await browser.close();
          })();
          EOF
          
          node measure-cwv.js
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

  vercel-analytics:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Fetch Vercel Analytics
        run: |
          echo "Fetching Vercel Analytics data..."
          # Use Vercel API to fetch analytics data
          curl -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
               "https://api.vercel.com/v1/analytics/usage?projectId=${{ secrets.VERCEL_PROJECT_ID }}"

  performance-regression:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build PR version
        run: npm run build

      - name: Start PR application
        run: npm run start &
        env:
          NODE_ENV: production
          PORT: 3001

      - name: Wait for PR server
        run: npx wait-on http://localhost:3001

      - name: Checkout base branch
        run: |
          git fetch origin ${{ github.base_ref }}
          git checkout origin/${{ github.base_ref }}

      - name: Install base dependencies
        run: npm ci

      - name: Build base version
        run: npm run build

      - name: Start base application
        run: npm run start &
        env:
          NODE_ENV: production
          PORT: 3002

      - name: Wait for base server
        run: npx wait-on http://localhost:3002

      - name: Compare performance
        run: |
          npm install -g lighthouse
          
          # Run Lighthouse on both versions
          lighthouse http://localhost:3001 --output=json --output-path=pr-results.json --quiet
          lighthouse http://localhost:3002 --output=json --output-path=base-results.json --quiet
          
          # Compare results
          node -e "
            const pr = require('./pr-results.json');
            const base = require('./base-results.json');
            
            const prScore = pr.lhr.categories.performance.score * 100;
            const baseScore = base.lhr.categories.performance.score * 100;
            const diff = prScore - baseScore;
            
            console.log(\`Performance Score - Base: \${baseScore}, PR: \${prScore}, Diff: \${diff > 0 ? '+' : ''}\${diff}\`);
            
            if (diff < -5) {
              console.log('❌ Performance regression detected!');
              process.exit(1);
            } else {
              console.log('✅ No significant performance regression');
            }
          "

  database-performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Monitor database performance
        run: |
          echo "Monitoring Supabase database performance..."
          
          # This would typically involve:
          # 1. Checking slow query logs
          # 2. Monitoring connection pool usage
          # 3. Checking table sizes and growth
          # 4. Monitoring index usage
          
          # Example placeholder for actual monitoring
          echo "Database performance monitoring completed"
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_PRODUCTION_DB_URL }}